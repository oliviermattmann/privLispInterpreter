(defun and (x y)
(cond (x (cond (y 't) ('t '())))
('t '())))

(defun or (x y)
    (cond (x 't)
          (y 't)
          ('t '())))

(define (deriv exp var)
  (cond ((number? exp) 0)
       ((variable? exp) (if (same-variable? exp var) 1 0))
       ((sum? exp) (make-sum(deriv (addend exp) var)
                            (deriv (augend exp) var)))
       ((product? exp)
        (make-sum
         (make-product (multiplier exp)
                       (deriv (multiplicand exp) var))
         (make-product (deriv (multiplier exp) var)
                       (multiplicand exp))))
       ('t
        '(error unknown expression type))))

(define (variable? x) (symbol? x))

(define (same-variable? v1 v2)
  (and (and (variable? v1) (variable? v2)) (eq v1 v2)))

(define (make-sum a1 a2)
  (cond ((=number? a1 0) a2)
        ((=number? a2 0) a1)
        ((and (number? a1) (number? a2))
              (+ a1 a2))
        ('t (list 'x a1 a2))))
(define (make-product m1 m2)
  (cond ((or (=number? m1 0) (=number? m2 0)) 0)
        ((=number? m1 1) m2)
        ((=number? m2 1) m1)
        ((and (number? m1) (number? m2)) (* m1 m2))
        ('t (list '* m1 m2))))

(define (=number? exp num) (and (number? exp) (eq exp num)))

(define (sum? x) (and (pair? x) (eq (car x) '+)))
(define (addend s) (car (cdr s)))
(define (augend s) (car(cdr(cdr s))))

(define (product? x) (and (pair? x) (eq (car x) '*)))
(define (multiplier p) (car(cdr p)))
(define (multiplicand p) (car(cdr(cdr p))))


(deriv '(+ x 3) 'x)
(deriv '(* x y) 'x)


