(quote (defining helper functions))
(define (square x) (* x x))
(define (inc n) (+ n 1))
(define (dec x) (- x 1))
(define (identity n) n)

(quote (exercise 1.31 (product procedure)))

(define (product term a next b)
  (if (> a b)
      1
      (* (term a)
         (product term (next a) next b))))

(define (factorial n)
  (product identity 1 inc n))

(define (pi-term n)
    (/ (* 4 n n) (- (* 4 n n) 1)))

(define (pi-product b) (product pi-term 1 inc b))

(quote (pi-product 700:))
(* 2 (pi-product 700))
(quote (factorial 5:))
(factorial 5)

(quote (exercise 1.34 (define (f g) (g 2))))
(define (f g) (g 2))
(quote (test cases from book:))
(f (lambda (x) (* x x)))
(f (lambda (z) (* z (+ z 1))))

(quote (exercise 1.41 (double procedure)))
(define (double term)
  (lambda (x) (term (term x))))
(quote ((((double (double double)) inc) 5) = 21))
(((double (double double)) inc) 5)

(quote (exercise 1.42 (compose procedure)))
(define (compose f g)
  (lambda (x) (f (g x))))
(quote (((compose square inc) 6) = 49))
((compose square inc) 6)

(quote (exercise 1.43 (repeated prodecure)))
(define (repeated f n)
    (if (< n 1)
        (lambda (x) x)
        (compose f (repeated f (- n 1)))))
(quote (((repeated square 2) 5) = 625))
((repeated square 2) 5)

(quote (exercise 2.18 (reverse procedure)))
(define (append list1 list2)
  (if (null? list1)
      list2
      (cons (car list1) (append (cdr list1) list2))))

(define (reverse items)
  (if (null? items)
      nil
      (append (reverse (cdr items)) (car items))))
(define thelist (list 1 2 3 4 5 6))
(quote (reverse that list:))
(reverse thelist)

(quote (exercise 2.21 (square-list procedure)))
(quote (square-list (without map)))
(define (square-list items)
  (if (null? items)
      nil
      (cons (square (car items)) (square-list (cdr items)))))
(quote (square-list-v2 (with map)))
(define (map f lst)
    (if (null? lst)
        nil
        (cons (f (car lst)) (map f (cdr lst)))))

(define (square-list-v2 items)
  (map square items))

(quote (square-list (list 1 2 3 4)))
(square-list (list 1 2 3 4))

(quote (exercise 2.23 (for-each)))
(define (for-each p items)
    (if (null? items) 't
        (begin (p (car items))
            (for-each p (cdr items)))))

(quote (for-each display (list 57 321 88)))
(for-each display (list 57 321 88))