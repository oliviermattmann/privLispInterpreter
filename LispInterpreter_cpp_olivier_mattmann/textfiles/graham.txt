(quote (defun subst))
(defun subst (x y z)
    (cond ((atom z)
            (cond ((eq z y) x)
                    ('t z)))
    ('t (cons (subst x y (car z))
(subst x y (cdr z))))))

(quote (defun null.))
(defun null. (x) (eq x '()))

(quote (defun and.))
(defun and. (x y)
    (cond (x (cond (y 't)
                   ('t '())))
          ('t '())))

(quote (defun not.))
(defun not. (x)
    (cond (x '())
          ('t 't)))

(quote (defun pair.))
(defun pair. (x y)
    (cond ((and. (null. x) (null. y)) '())
          ((and. (not. (atom x)) (not. (atom y))) (cons (list (car x) (car y)) (pair. (cdr x) (cdr y))))))

(quote (defun append.))
(defun append. (x y)
    (cond ((null. x) y)
          ('t (cons (car x) (append. (cdr x) y)))))

(quote (defun assoc.))
(defun assoc. (x y)
(cond ((eq (car (car y)) x) (car (cdr (car y))))
      ('t (assoc. x (cdr y)))))

(quote (defun eval.))
(defun eval. (e a)
(cond
((atom e) (assoc. e a))
((atom (car e))
(cond
((eq (car e) 'quote) (car (cdr e)))
((eq (car e) 'atom) (atom (eval. (car (cdr e)) a)))
((eq (car e) 'eq) (eq (eval. (car (cdr e)) a)
(eval. (car(cdr (cdr e))) a)))
((eq (car e) 'car) (car (eval. (car (cdr e)) a)))
((eq (car e) 'cdr) (cdr (eval. (car (cdr e)) a)))
((eq (car e) 'cons) (cons (eval. (car (cdr e)) a)
(eval. (car (cdr (cdr e))) a)))
((eq (car e) 'cond) (evcon. (cdr e) a))
('t (eval. (cons (assoc. (car e) a)
(cdr e))
a))))
((eq (car (car e)) 'label)
(eval. (cons (car (cdr (cdr (car e)))) (cdr e))
(cons (list (car (cdr (car e))) (car e)) a)))
((eq (car (car e)) 'lambda)
(eval. (car (cdr (cdr (car e))))
(append. (pair. (car (cdr (car e))) (evlis. (cdr e) a))
a)))))

(quote (defun evcon.))
(defun evcon. (c a)
    (cond ((eval. (car (car c)) a) (eval. (car (cdr (car c))) a))
          ('t (evcon. (cdr c) a))))

(quote (defun evlis.))
(defun evlis. (m a)
    (cond ((null. m) '())
          ('t (cons (eval. (car m) a) (evlis. (cdr m) a)))))

